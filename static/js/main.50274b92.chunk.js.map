{"version":3,"sources":["Form.js","Nyt.js","Wiki.js","reportWebVitals.js","index.js"],"names":["Form","require","props","onSubmit","Search","type","name","placeholder","fetch","Wiki","useState","image","setImage","title","setTitle","e","a","preventDefault","searchTerm","target","elements","value","url_search","search_response","json","search_json","console","log","term","pageURL","substr","page_url_response","final","Object","entries","query","pages","original","source","className","src","width","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8LASeA,GCRCC,EAAQ,IACVA,EAAQ,KDAT,SAAAC,GAAK,OACjB,uBAAMC,SAAUD,EAAME,OAAtB,UACC,uBAAOC,KAAK,OAAOC,KAAK,aAAaC,YAAY,iBACjD,kDEFIC,EAAQP,EAAQ,KAuDPQ,EApDF,WAAO,IAAD,EAESC,mBAAS,IAFlB,mBAEVC,EAFU,KAEHC,EAFG,OAGSF,mBAAS,IAHlB,mBAGVG,EAHU,KAGHC,EAHG,KAKXV,EAAM,uCAAG,WAAOW,GAAP,6BAAAC,EAAA,yDAGbD,EAAEE,iBACIC,EAAaH,EAAEI,OAAOC,SAASF,WAAWG,MAJnC,wDAMPC,EANO,+EAM8EJ,EAN9E,yBAQiBV,EAAMc,GARvB,cAQPC,EARO,iBAUaA,EAAgBC,OAV7B,eAUPC,EAVO,OAWbC,QAAQC,IAAIF,GACNG,EAAOH,EAAY,GAAG,GACtBI,EAbO,sHAakHD,EAAKE,OAAO,KAb9H,UAcmBtB,EAAMqB,GAdzB,eAcPE,EAdO,iBAeOA,EAAkBP,OAfzB,QAePQ,EAfO,OAiBTC,OAAOC,QAAQF,EAAMG,MAAMC,OAAO,GAAG,GAAGC,UAC1CX,QAAQC,IAAIM,OAAOC,QAAQF,EAAMG,MAAMC,OAAO,GAAG,GAAGC,SAASC,QAC7D1B,EAASqB,OAAOC,QAAQF,EAAMG,MAAMC,OAAO,GAAG,GAAGC,SAASC,QAC1DxB,EAASW,EAAY,GAAG,MAGxBX,EAAS,qBACTF,EAAS,IACTc,QAAQC,IAAIM,OAAOC,QAAQF,EAAMG,MAAMC,SAzB5B,4CAAH,sDA+BZ,OACE,sBAAKG,UAAU,MAAf,UACE,6CACA,gKAGA,cAAC,EAAD,CAAMnC,OAAQA,IALhB,OAOE,qBAAKoC,IAAK7B,EAAO8B,MAAQ,UACzB,mBAAGF,UAAU,UAAb,SAAwB1B,QCvCf6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.50274b92.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Form = props => (\n\t<form onSubmit={props.Search}>\n\t\t<input type=\"text\" name=\"searchTerm\" placeholder=\"show me a...\"/>\n\t\t<button>search!</button>\n\t</form>\n);\n\nexport default Form;","import React from 'react';\nconst cheerio = require('cheerio');\nconst axios = require('axios');\n\nconst Nyt = () => {\n\n    const Ziti = () => {\n\n        axios.get('https://cooking.nytimes.com/recipes/1018954-baked-ziti')\n            .then((res) => {\n                const $ = cheerio.load(res.data);\n                return $('.recipe-steps').text(); \n            }).then((res) => {console.log(res)})\n\n\n\n\n\n    }\n\n    return (\n        <button onClick={Ziti}>ziti!</button>\n    )\n\n\n\n}\n\nexport default Nyt;","import React, { useState } from 'react';\nimport Nyt from './Nyt';\nimport Form from './Form';\nconst fetch = require(\"node-fetch\");\n\n\nconst Wiki = () => {\n\n  const [image, setImage] = useState(\"\");\n  const [title, setTitle] = useState(\"\");\n\n  const Search = async (e) => {\n\n\n    e.preventDefault();\n    const searchTerm = e.target.elements.searchTerm.value;\n    if (!searchTerm) return;\n    const url_search = `https://en.wikipedia.org/w/api.php?origin=*&action=opensearch&search=${searchTerm}&format=json`;\n\n    const search_response = await fetch(url_search);\n    \n    const search_json = await search_response.json();\n    console.log(search_json);\n    const term = search_json[3][0];\n    const pageURL = `https://en.wikipedia.org/w/api.php?origin=*&action=query&prop=pageimages&format=json&piprop=original&titles=${term.substr(30,)}`;\n    const page_url_response = await fetch(pageURL)\n    const final = await page_url_response.json();\n    \n    if (Object.entries(final.query.pages)[0][1].original) {\n      console.log(Object.entries(final.query.pages)[0][1].original.source);\n      setImage(Object.entries(final.query.pages)[0][1].original.source);\n      setTitle(search_json[1][0]);\n    }\n    else {\n      setTitle(\"no image found :(\");\n      setImage(\"\");\n      console.log(Object.entries(final.query.pages));\n    }\n\n  }  \n\n  \n  return (\n    <div className=\"Box\">\n      <h3>wiki search</h3>\n      <p>search something on wikipedia (the free encyclopedia) and see \n        its page image below. still buggy so some requests will not show!\n      </p>\n      <Form Search={Search}/>\n      &nbsp;\n      <img src={image} width = \"300px\"/>\n      <p className=\"caption\">{title}</p>\n      \n    </div>\n  )\n\n}\n\nexport default Wiki;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\n\nimport Wiki from './Wiki';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Wiki />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}